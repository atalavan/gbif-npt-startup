From 0c0acfe872b80557fc0278b175bd1166b7a3f8cd Mon Sep 17 00:00:00 2001
From: Pierre Buyle <buyle@pheromone.ca>
Date: Mon, 6 Feb 2012 16:38:47 -0500
Subject: [PATCH] Issue #1430584 by mongolito404: Fixes test cases.

---
 customerror.info        |    3 +-
 customerror.test        |   76 +++++++++++++++++++++++++++++++++++++++++++++++
 tests/accessdenied.test |   51 -------------------------------
 tests/pagenotfound.test |   53 --------------------------------
 4 files changed, 77 insertions(+), 106 deletions(-)
 create mode 100644 customerror.test
 delete mode 100644 tests/accessdenied.test
 delete mode 100644 tests/pagenotfound.test

diff --git a/customerror.info b/customerror.info
index 74cf0e2..4405a26 100644
--- a/customerror.info
+++ b/customerror.info
@@ -3,5 +3,4 @@ description = Enables the creation of custom error pages for 404 and 403 errors,
 core = 7.x
 configure = admin/config/system/customerror
 
-files[] = tests/accessdenied.test
-files[] = tests/pagenotfound.test
+files[] = customerror.test
diff --git a/customerror.test b/customerror.test
new file mode 100644
index 0000000..37a29ee
--- /dev/null
+++ b/customerror.test
@@ -0,0 +1,76 @@
+<?php
+
+class CustomErrorTestCas extends DrupalWebTestCase {
+
+  public static function getInfo() {
+    return array(
+      'name' => t('Custom Error'),
+      'description' => t('Check that the custom error messages are displayed.'),
+      'group' => t('Custom Error'),
+    );
+  }
+
+  function setUp() {
+    parent::setUp(array('variable', 'customerror'));
+  }
+
+  function testPageNotFoundMessage() {
+    // Set title and text of error message.
+    $error_code = 404;
+    $title = $this->randomName($number = 10, $prefix = 'simpletest_');
+    variable_set('customerror_'. $error_code .'_title', $title);
+    $description = array(
+      'value' => $this->randomName($number = 512, $prefix = 'simpletest_'),
+      'format' =>  filter_default_format(),
+    );
+    variable_set('customerror_'. $error_code, $description);
+
+    // Access error page directly, check for title and text of error message.
+    $this->drupalGet('customerror/'. $error_code);
+    $this->assertText($title, 'Title on '. $error_code .' error page set when accessed directly');
+    $this->assertText($description['value'], 'Description on '. $error_code .' error page set when accessed directly');
+
+    // Point Drupal to the new error message.
+    variable_set('site_'. $error_code, 'customerror/'. $error_code);
+
+    // Access a non-existing page, check for title and text of error message.
+    $this->drupalGet('foo/bar');
+
+    /* Check for response code, title and text of error message */
+    $this->assertResponse($error_code, 'Response code on '. $error_code .' error page set when accessed at non-existent URL');
+    $this->assertText($title, 'Title on '. $error_code .' error page set when accessed at non-existent URL');
+    $this->assertText($description['value'], 'Description on '. $error_code .' error page set when accessed at non-existent URL');
+  }
+
+  /**
+   * Tests 403 pages.
+   */
+  function testAccessDeniedMessage() {
+    /* Set title and text of error message */
+    $error_code = 403;
+    $title = $this->randomName($number = 10, $prefix = 'simpletest_');
+    variable_set('customerror_'. $error_code .'_title', $title);
+    $description = array(
+      'value' => $this->randomName($number = 512, $prefix = 'simpletest_'),
+      'format' =>  filter_default_format(),
+    );
+    variable_set('customerror_'. $error_code, $description);
+
+    // Access error page directly, check for title and text of error message.
+    $this->drupalGet('customerror/'. $error_code);
+    $this->assertText($title, 'Title on '. $error_code .' error page set when accessed directly');
+    $this->assertText($description['value'], 'Description on '. $error_code .' error page set when accessed directly');
+
+    // Point Drupal to the new error message.
+    variable_set('site_'. $error_code, 'customerror/'. $error_code);
+
+    // Access admin page as un anonymous user, check for title and text of error message.
+    $this->drupalGet('admin');
+
+    /* Check for response code, title and text of error message */
+    $this->assertResponse($error_code, 'Response code on '. $error_code .' error page set when accessed at non-existent URL');
+    $this->assertText($title, 'Title on '. $error_code .' error page set when accessed at non-existent URL');
+    $this->assertText($description['value'], 'Description on '. $error_code .' error page set when accessed at non-existent URL');
+  }
+
+}
diff --git a/tests/accessdenied.test b/tests/accessdenied.test
deleted file mode 100644
index 733e8fd..0000000
--- a/tests/accessdenied.test
+++ /dev/null
@@ -1,51 +0,0 @@
-<?php
-
-class AccessDeniedTest extends DrupalWebCase {
-
-  public static function get_info() {
-    return array(
-      'name' => t('403 Access Denied'),
-      'description' => t('Check that the custom error message is displayed when access is denied.'),
-      'group' => t('CustomError'),
-    );
-  }
-
-  /**
-   * Tests 403 pages.
-   */
-  function testAccessDeniedMessage() {
-
-    /* Enable CustomError module */
-    $this->drupalModuleEnable('customerror');
-
-    /* Set title and text of error message */
-    $error_code = 403;
-    $title = $this->randomName($number = 10, $prefix = 'simpletest_');
-    $this->drupalVariableSet('customerror_'. $error_code .'_title', $title);
-
-    $description = $this->randomName($number = 512, $prefix = 'simpletest_');
-    $this->drupalVariableSet('customerror_'. $error_code, $description);
-
-    /* Access error page directly, check for title and text of error message */
-    $this->get(url('customerror/'. $error_code, NULL, NULL, TRUE));
-    $this->assertText($title, 'Title on '. $error_code .' error page set when accessed directly');
-    $this->assertText($description, 'Description on '. $error_code .' error page set when accessed directly');
-
-    /* Point Drupal to the new error message */
-    $this->drupalVariableSet('site_'. $error_code, 'customerror/'. $error_code);
-
-    /* Log in as a user with no privileges */
-    $user = $this->drupalCreateUserRolePerm();
-    $this->drupalLoginUser($user);
-
-    /* Attempt to access CustomError module settings page */
-    $this->get(url('admin/settings/customerror', NULL, NULL, TRUE));
-
-    /* Check for response code, title and text of error message */
-    $this->assertResponse($error_code, 'Response code on '. $error_code .' error page set when accessed at non-existent URL');
-    $this->assertText($title, 'Title on '. $error_code .' error page set when accessed at non-existent URL');
-    $this->assertText($description, 'Description on '. $error_code .' error page set when accessed at non-existent URL');
-
-  }
-
-}
diff --git a/tests/pagenotfound.test b/tests/pagenotfound.test
deleted file mode 100644
index 2b3ddeb..0000000
--- a/tests/pagenotfound.test
+++ /dev/null
@@ -1,53 +0,0 @@
-<?php
-
-class PageNotFoundTest extends DrupalTestCase {
-
-  public static function get_info() {
-    return array(
-      'name' => t('404 Page not found'),
-      'description' => t('Check that the custom error message is displayed when a page is not found.'),
-      'group' => t('CustomError'),
-    );
-  }
-
-  /**
-   * Tests 404 pages.
-   */
-  function testPageNotFoundMessage() {
-
-    /* Enable CustomError module */
-    $this->drupalModuleEnable('customerror');
-
-    /* Set title and text of error message */
-    $error_code = 404;
-    $title = $this->randomName($number = 10, $prefix = 'simpletest_');
-    $this->drupalVariableSet('customerror_'. $error_code .'_title', $title);
-
-    $description = $this->randomName($number = 512, $prefix = 'simpletest_');
-    $this->drupalVariableSet('customerror_'. $error_code, $description);
-
-    /* Access error page directly, check for title and text of error message */
-    $this->get(url('customerror/'. $error_code, NULL, NULL, TRUE));
-    $this->assertText($title, 'Title on '. $error_code .' error page set when accessed directly');
-    $this->assertText($description, 'Description on '. $error_code .' error page set when accessed directly');
-
-    /* Point Drupal to the new error message */
-    $this->drupalVariableSet('site_'. $error_code, 'customerror/'. $error_code);
-
-    /* Log in as a user with basic privileges */
-    $user = $this->drupalCreateUserRolePerm(array('access content'));
-    $this->drupalLoginUser($user);
-
-    /* Access next node ID, shouldn't exist yet. Note that this increments the nid each time it's run. */
-    $this->get(url('node/'. db_next_id('{node}_nid'), NULL, NULL, TRUE));
-
-    /* Check for response code, title and text of error message */
-    $this->assertResponse($error_code, 'Response code on '. $error_code .' error page set when accessed at non-existent URL');
-    $this->assertText($title, 'Title on '. $error_code .' error page set when accessed at non-existent URL');
-    $this->assertText($description, 'Description on '. $error_code .' error page set when accessed at non-existent URL');
-
-    /* Could also create node, prove it's accessible, delete it, then try to access again and prove it's gone */
-
-  }
-
-}
-- 
1.7.8.3

